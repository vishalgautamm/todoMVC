var _user$project$Main$filteredTodos = function (model) {
	var matchesFilter = function () {
		var _p0 = model.filter;
		switch (_p0.ctor) {
			case 'All':
				return function (_p1) {
					return true;
				};
			case 'Active':
				return function (todo) {
					return _elm_lang$core$Native_Utils.eq(todo.completed, false);
				};
			default:
				return function (todo) {
					return _elm_lang$core$Native_Utils.eq(todo.completed, true);
				};
		}
	}();
	return A2(_elm_lang$core$List$filter, matchesFilter, model.todos);
};
var _user$project$Main$onEnter = function (msg) {
	var isEnter = function (code) {
		return _elm_lang$core$Native_Utils.eq(code, 13) ? _elm_lang$core$Json_Decode$succeed(msg) : _elm_lang$core$Json_Decode$fail('Not the right keycode');
	};
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$andThen, isEnter, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Main$newTodo = {title: '', completed: false, editing: false, identifier: 0};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'Add':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: {ctor: '::', _0: model.todo, _1: model.todos},
						todo: _elm_lang$core$Native_Utils.update(
							_user$project$Main$newTodo,
							{identifier: model.nextIdentifier}),
						nextIdentifier: model.nextIdentifier + 1
					});
			case 'Delete':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(
							_elm_lang$core$List$filter,
							function (targetTodo) {
								return !_elm_lang$core$Native_Utils.eq(_p2._0.identifier, targetTodo.identifier);
							},
							model.todos)
					});
			case 'Complete':
				var _p3 = _p2._0;
				var updatedTodo = function (thisTodo) {
					return _elm_lang$core$Native_Utils.eq(thisTodo.identifier, _p3.identifier) ? _elm_lang$core$Native_Utils.update(
						_p3,
						{completed: true}) : thisTodo;
				};
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(_elm_lang$core$List$map, updatedTodo, model.todos)
					});
			case 'Uncomplete':
				var _p4 = _p2._0;
				var updatedTodo = function (thisTodo) {
					return _elm_lang$core$Native_Utils.eq(thisTodo.identifier, _p4.identifier) ? _elm_lang$core$Native_Utils.update(
						_p4,
						{completed: false}) : thisTodo;
				};
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(_elm_lang$core$List$map, updatedTodo, model.todos)
					});
			case 'UpdatedField':
				var todo = model.todo;
				var updatedTodo = _elm_lang$core$Native_Utils.update(
					todo,
					{title: _p2._0});
				return _elm_lang$core$Native_Utils.update(
					model,
					{todo: updatedTodo});
			case 'Filter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{filter: _p2._0});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(
							_elm_lang$core$List$filter,
							function (todo) {
								return _elm_lang$core$Native_Utils.eq(todo.completed, false);
							},
							model.todos)
					});
		}
	});
var _user$project$Main$Todo = F4(
	function (a, b, c, d) {
		return {title: a, completed: b, editing: c, identifier: d};
	});
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {todos: a, todo: b, filter: c, nextIdentifier: d};
	});
var _user$project$Main$Completed = {ctor: 'Completed'};
var _user$project$Main$Active = {ctor: 'Active'};
var _user$project$Main$All = {ctor: 'All'};
var _user$project$Main$initialModel = {
	todos: {
		ctor: '::',
		_0: {title: 'Learn elm programming', completed: false, editing: false, identifier: 1},
		_1: {ctor: '[]'}
	},
	todo: _elm_lang$core$Native_Utils.update(
		_user$project$Main$newTodo,
		{identifier: 2}),
	filter: _user$project$Main$All,
	nextIdentifier: 3
};
var _user$project$Main$Clear = {ctor: 'Clear'};
var _user$project$Main$Filter = function (a) {
	return {ctor: 'Filter', _0: a};
};
var _user$project$Main$filterItemView = F2(
	function (model, filterState) {
		return A2(
			_elm_lang$html$Html$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'selected',
									_1: _elm_lang$core$Native_Utils.eq(model.filter, filterState)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('#'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Main$Filter(filterState)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(filterState)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$UpdatedField = function (a) {
	return {ctor: 'UpdatedField', _0: a};
};
var _user$project$Main$Uncomplete = function (a) {
	return {ctor: 'Uncomplete', _0: a};
};
var _user$project$Main$Complete = function (a) {
	return {ctor: 'Complete', _0: a};
};
var _user$project$Main$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$Main$todoView = function (todo) {
	var handleComplete = function () {
		var _p5 = todo.completed;
		if (_p5 === true) {
			return function (_p6) {
				return _user$project$Main$Uncomplete(todo);
			};
		} else {
			return function (_p7) {
				return _user$project$Main$Complete(todo);
			};
		}
	}();
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'completed', _1: todo.completed},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('view'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('toggle'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$checked(todo.completed),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onCheck(handleComplete),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(todo.title),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('destroy'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$Delete(todo)),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$section,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('todoapp'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$header,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('header'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Todo Elm'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('new-todo'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$placeholder('What needs to be done'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(model.todo.title),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$autofocus(true),
													_1: {
														ctor: '::',
														_0: _user$project$Main$onEnter(_user$project$Main$Add),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdatedField),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$section,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('main'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$ul,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('todo-list'),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										_user$project$Main$todoView,
										_user$project$Main$filteredTodos(model))),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$footer,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('footer'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('todo-count'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$strong,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString(
															_elm_lang$core$List$length(
																A2(
																	_elm_lang$core$List$filter,
																	function (todo) {
																		return _elm_lang$core$Native_Utils.eq(todo.completed, false);
																	},
																	model.todos)))),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(' items left'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$ul,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('filters'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(_user$project$Main$filterItemView, model, _user$project$Main$All),
												_1: {
													ctor: '::',
													_0: A2(_user$project$Main$filterItemView, model, _user$project$Main$Active),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Main$filterItemView, model, _user$project$Main$Completed),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('clear-completed'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Clear),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Clear completed'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$initialModel, view: _user$project$Main$view, update: _user$project$Main$update})();
