var _user$project$Main$styles = '\n    html,\n    body {\n        margin: 0;\n        padding: 0;\n    }\n\n    button {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        background: none;\n        font-size: 100%;\n        vertical-align: baseline;\n        font-family: inherit;\n        font-weight: inherit;\n        color: inherit;\n        -webkit-appearance: none;\n        appearance: none;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    body {\n        font: 14px \'Helvetica Neue\', Helvetica, Arial, sans-serif;\n        line-height: 1.4em;\n        background: #f5f5f5;\n        color: #4d4d4d;\n        min-width: 230px;\n        max-width: 550px;\n        margin: 0 auto;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-weight: 300;\n    }\n\n    :focus {\n        outline: 0;\n    }\n\n    .hidden {\n        display: none;\n    }\n\n    .todoapp {\n        background: #fff;\n        margin: 130px 0 40px 0;\n        position: relative;\n        box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2),\n                    0 25px 50px 0 rgba(0, 0, 0, 0.1);\n    }\n\n    .todoapp input::-webkit-input-placeholder {\n        font-style: italic;\n        font-weight: 300;\n        color: #e6e6e6;\n    }\n\n    .todoapp input::-moz-placeholder {\n        font-style: italic;\n        font-weight: 300;\n        color: #e6e6e6;\n    }\n\n    .todoapp input::input-placeholder {\n        font-style: italic;\n        font-weight: 300;\n        color: #e6e6e6;\n    }\n\n    .todoapp h1 {\n        position: absolute;\n        top: -155px;\n        width: 100%;\n        font-size: 100px;\n        font-weight: 100;\n        text-align: center;\n        color: rgba(175, 47, 47, 0.15);\n        -webkit-text-rendering: optimizeLegibility;\n        -moz-text-rendering: optimizeLegibility;\n        text-rendering: optimizeLegibility;\n    }\n\n    .new-todo,\n    .edit {\n        position: relative;\n        margin: 0;\n        width: 100%;\n        font-size: 24px;\n        font-family: inherit;\n        font-weight: inherit;\n        line-height: 1.4em;\n        border: 0;\n        color: inherit;\n        padding: 6px;\n        border: 1px solid #999;\n        box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);\n        box-sizing: border-box;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    .new-todo {\n        padding: 16px 16px 16px 60px;\n        border: none;\n        background: rgba(0, 0, 0, 0.003);\n        box-shadow: inset 0 -2px 1px rgba(0,0,0,0.03);\n    }\n\n    .main {\n        position: relative;\n        z-index: 2;\n        border-top: 1px solid #e6e6e6;\n    }\n\n    label[for=\'toggle-all\'] {\n        display: none;\n    }\n\n    .toggle-all {\n        position: absolute;\n        top: -55px;\n        left: -12px;\n        width: 60px;\n        height: 34px;\n        text-align: center;\n        border: none; /* Mobile Safari */\n    }\n\n    .toggle-all:before {\n        content: \'‚ùØ\';\n        font-size: 22px;\n        color: #e6e6e6;\n        padding: 10px 27px 10px 27px;\n    }\n\n    .toggle-all:checked:before {\n        color: #737373;\n    }\n\n    .todo-list {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n\n    .todo-list li {\n        position: relative;\n        font-size: 24px;\n        border-bottom: 1px solid #ededed;\n    }\n\n    .todo-list li:last-child {\n        border-bottom: none;\n    }\n\n    .todo-list li.editing {\n        border-bottom: none;\n        padding: 0;\n    }\n\n    .todo-list li.editing .edit {\n        display: block;\n        width: 506px;\n        padding: 12px 16px;\n        margin: 0 0 0 43px;\n    }\n\n    .todo-list li.editing .view {\n        display: none;\n    }\n\n    .todo-list li .toggle {\n        text-align: center;\n        width: 40px;\n        /* auto, since non-WebKit browsers doesn\'t support input styling */\n        height: auto;\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        margin: auto 0;\n        border: none; /* Mobile Safari */\n        -webkit-appearance: none;\n        appearance: none;\n    }\n\n    .todo-list li .toggle:after {\n        content: url(\'data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"-10 -18 100 135\"><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"none\" stroke=\"#ededed\" stroke-width=\"3\"/></svg>\');\n    }\n\n    .todo-list li .toggle:checked:after {\n        content: url(\'data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"-10 -18 100 135\"><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"none\" stroke=\"#bddad5\" stroke-width=\"3\"/><path fill=\"#5dc2af\" d=\"M72 25L42 71 27 56l-4 4 20 20 34-52z\"/></svg>\');\n    }\n\n    .todo-list li label {\n        word-break: break-all;\n        padding: 15px 60px 15px 15px;\n        margin-left: 45px;\n        display: block;\n        line-height: 1.2;\n        transition: color 0.4s;\n    }\n\n    .todo-list li.completed label {\n        color: #d9d9d9;\n        text-decoration: line-through;\n    }\n\n    .todo-list li .destroy {\n        display: none;\n        position: absolute;\n        top: 0;\n        right: 10px;\n        bottom: 0;\n        width: 40px;\n        height: 40px;\n        margin: auto 0;\n        font-size: 30px;\n        color: #cc9a9a;\n        margin-bottom: 11px;\n        transition: color 0.2s ease-out;\n    }\n\n    .todo-list li .destroy:hover {\n        color: #af5b5e;\n    }\n\n    .todo-list li .destroy:after {\n        content: \'x\';\n    }\n\n    .todo-list li:hover .destroy {\n        display: block;\n    }\n\n    .todo-list li .edit {\n        display: none;\n    }\n\n    .todo-list li.editing:last-child {\n        margin-bottom: -1px;\n    }\n\n    .footer {\n        color: #777;\n        padding: 10px 15px;\n        height: 20px;\n        text-align: center;\n        border-top: 1px solid #e6e6e6;\n    }\n\n    .footer:before {\n        content: \'\';\n        position: absolute;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        height: 50px;\n        overflow: hidden;\n        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),\n                    0 8px 0 -3px #f6f6f6,\n                    0 9px 1px -3px rgba(0, 0, 0, 0.2),\n                    0 16px 0 -6px #f6f6f6,\n                    0 17px 2px -6px rgba(0, 0, 0, 0.2);\n    }\n\n    .todo-count {\n        float: left;\n        text-align: left;\n    }\n\n    .todo-count strong {\n        font-weight: 300;\n    }\n\n    .filters {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n        position: absolute;\n        right: 0;\n        left: 0;\n    }\n\n    .filters li {\n        display: inline;\n    }\n\n    .filters li a {\n        color: inherit;\n        margin: 3px;\n        padding: 3px 7px;\n        text-decoration: none;\n        border: 1px solid transparent;\n        border-radius: 3px;\n    }\n\n    .filters li a:hover {\n        border-color: rgba(175, 47, 47, 0.1);\n    }\n\n    .filters li a.selected {\n        border-color: rgba(175, 47, 47, 0.2);\n    }\n\n    .clear-completed,\n    html .clear-completed:active {\n        float: right;\n        position: relative;\n        line-height: 20px;\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    .clear-completed:hover {\n        text-decoration: underline;\n    }\n\n    .info {\n        margin: 65px auto 0;\n        color: #bfbfbf;\n        font-size: 10px;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);\n        text-align: center;\n    }\n\n    .info p {\n        line-height: 1;\n    }\n\n    .info a {\n        color: inherit;\n        text-decoration: none;\n        font-weight: 400;\n    }\n\n    .info a:hover {\n        text-decoration: underline;\n    }\n\n    /*\n        Hack to remove background from Mobile Safari.\n        Can\'t use it globally since it destroys checkboxes in Firefox\n    */\n    @media screen and (-webkit-min-device-pixel-ratio:0) {\n        .toggle-all,\n        .todo-list li .toggle {\n            background: none;\n        }\n\n        .todo-list li .toggle {\n            height: 40px;\n        }\n\n        .toggle-all {\n            -webkit-transform: rotate(90deg);\n            transform: rotate(90deg);\n            -webkit-appearance: none;\n            appearance: none;\n        }\n    }\n\n    @media (max-width: 430px) {\n        .footer {\n            height: 50px;\n        }\n\n        .filters {\n            bottom: 10px;\n        }\n    }\n  ';
var _user$project$Main$encodeFilterState = function (filterState) {
	return _elm_lang$core$Json_Encode$string(
		_elm_lang$core$Basics$toString(filterState));
};
var _user$project$Main$encodeTodo = function (todo) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'title',
				_1: _elm_lang$core$Json_Encode$string(todo.title)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'completed',
					_1: _elm_lang$core$Json_Encode$bool(todo.completed)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'editing',
						_1: _elm_lang$core$Json_Encode$bool(todo.editing)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'identifier',
							_1: _elm_lang$core$Json_Encode$int(todo.identifier)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$encodeJson = function (model) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'todos',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _user$project$Main$encodeTodo, model.todos))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'todo',
					_1: _user$project$Main$encodeTodo(model.todo)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'filter',
						_1: _user$project$Main$encodeFilterState(model.filter)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'nextIdentifier',
							_1: _elm_lang$core$Json_Encode$int(model.nextIdentifier)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$filteredTodos = function (model) {
	var matchesFilter = function () {
		var _p0 = model.filter;
		switch (_p0.ctor) {
			case 'All':
				return function (_p1) {
					return true;
				};
			case 'Active':
				return function (todo) {
					return _elm_lang$core$Native_Utils.eq(todo.completed, false);
				};
			default:
				return function (todo) {
					return _elm_lang$core$Native_Utils.eq(todo.completed, true);
				};
		}
	}();
	return A2(_elm_lang$core$List$filter, matchesFilter, model.todos);
};
var _user$project$Main$onEnter = function (msg) {
	var isEnter = function (code) {
		return _elm_lang$core$Native_Utils.eq(code, 13) ? _elm_lang$core$Json_Decode$succeed(msg) : _elm_lang$core$Json_Decode$fail('not the right keycode');
	};
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$andThen, isEnter, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Main$newTodo = {title: '', completed: false, editing: false, identifier: 0};
var _user$project$Main$storageInput = _elm_lang$core$Native_Platform.incomingPort('storageInput', _elm_lang$core$Json_Decode$value);
var _user$project$Main$storage = _elm_lang$core$Native_Platform.outgoingPort(
	'storage',
	function (v) {
		return v;
	});
var _user$project$Main$sendToStorage = function (model) {
	return _user$project$Main$storage(
		_user$project$Main$encodeJson(model));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'Add':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: {ctor: '::', _0: model.todo, _1: model.todos},
						todo: _elm_lang$core$Native_Utils.update(
							_user$project$Main$newTodo,
							{identifier: model.nextIdentifier}),
						nextIdentifier: model.nextIdentifier + 1
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$sendToStorage(newModel)
				};
			case 'Complete':
				var _p3 = _p2._0;
				var updateTodo = function (thisTodo) {
					return _elm_lang$core$Native_Utils.eq(thisTodo.identifier, _p3.identifier) ? _elm_lang$core$Native_Utils.update(
						_p3,
						{completed: true}) : thisTodo;
				};
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(_elm_lang$core$List$map, updateTodo, model.todos)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$sendToStorage(newModel)
				};
			case 'Delete':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(
							_elm_lang$core$List$filter,
							function (mappedTodo) {
								return !_elm_lang$core$Native_Utils.eq(_p2._0.identifier, mappedTodo.identifier);
							},
							model.todos)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$sendToStorage(newModel)
				};
			case 'UpdateField':
				var todo = model.todo;
				var updatedTodo = _elm_lang$core$Native_Utils.update(
					todo,
					{title: _p2._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{todo: updatedTodo});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$sendToStorage(newModel)
				};
			case 'Filter':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{filter: _p2._0});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$sendToStorage(newModel)
				};
			case 'Clear':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						todos: A2(
							_elm_lang$core$List$filter,
							function (todo) {
								return _elm_lang$core$Native_Utils.eq(todo.completed, false);
							},
							model.todos)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$sendToStorage(newModel)
				};
			case 'SetModel':
				return {ctor: '_Tuple2', _0: _p2._0, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$Todo = F4(
	function (a, b, c, d) {
		return {title: a, completed: b, editing: c, identifier: d};
	});
var _user$project$Main$todoDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'identifier',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'editing',
		_elm_lang$core$Json_Decode$bool,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'completed',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'title',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Todo)))));
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {todos: a, todo: b, filter: c, nextIdentifier: d};
	});
var _user$project$Main$Completed = {ctor: 'Completed'};
var _user$project$Main$Active = {ctor: 'Active'};
var _user$project$Main$All = {ctor: 'All'};
var _user$project$Main$initialModel = {
	todos: {
		ctor: '::',
		_0: {title: 'The first todo', completed: false, editing: false, identifier: 1},
		_1: {ctor: '[]'}
	},
	todo: _elm_lang$core$Native_Utils.update(
		_user$project$Main$newTodo,
		{identifier: 2}),
	filter: _user$project$Main$All,
	nextIdentifier: 3
};
var _user$project$Main$filterStateDecoder = function (string) {
	var _p4 = string;
	switch (_p4) {
		case 'All':
			return _user$project$Main$All;
		case 'Active':
			return _user$project$Main$Active;
		case 'Completed':
			return _user$project$Main$Completed;
		default:
			var _p5 = A2(
				_elm_lang$core$Debug$log,
				'filterStateDecoder',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Couldn\'t decode value ',
					A2(_elm_lang$core$Basics_ops['++'], string, ' so defaulting to All.')));
			return _user$project$Main$All;
	}
};
var _user$project$Main$modelDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'nextIdentifier',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'filter',
		A2(_elm_lang$core$Json_Decode$map, _user$project$Main$filterStateDecoder, _elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'todo',
			_user$project$Main$todoDecoder,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'todos',
				_elm_lang$core$Json_Decode$list(_user$project$Main$todoDecoder),
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Model)))));
var _user$project$Main$decodeModel = function (modelJson) {
	return A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Main$modelDecoder, modelJson);
};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$SetModel = function (a) {
	return {ctor: 'SetModel', _0: a};
};
var _user$project$Main$mapStorageInput = function (modelJson) {
	var _p6 = _user$project$Main$decodeModel(modelJson);
	if (_p6.ctor === 'Ok') {
		return _user$project$Main$SetModel(_p6._0);
	} else {
		var _p7 = A2(_elm_lang$core$Debug$log, 'Error in mapStorageInput:', _p6._0);
		return _user$project$Main$NoOp;
	}
};
var _user$project$Main$subscriptions = function (model) {
	return _user$project$Main$storageInput(_user$project$Main$mapStorageInput);
};
var _user$project$Main$Clear = {ctor: 'Clear'};
var _user$project$Main$Filter = function (a) {
	return {ctor: 'Filter', _0: a};
};
var _user$project$Main$filterItemView = F2(
	function (model, filterState) {
		return A2(
			_elm_lang$html$Html$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'selected',
									_1: _elm_lang$core$Native_Utils.eq(model.filter, filterState)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('#'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Main$Filter(filterState)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(filterState)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$UpdateField = function (a) {
	return {ctor: 'UpdateField', _0: a};
};
var _user$project$Main$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$Main$Complete = function (a) {
	return {ctor: 'Complete', _0: a};
};
var _user$project$Main$todoView = function (todo) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'completed', _1: todo.completed},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('view'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('toggle'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$checked(todo.completed),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onCheck(
											function (_p8) {
												return _user$project$Main$Complete(todo);
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(todo.title),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('destroy'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$Delete(todo)),
										_1: {ctor: '[]'}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(
				_elm_lang$html$Html$node,
				'style',
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text/css'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_user$project$Main$styles),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$section,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('todoapp'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$header,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('header'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h1,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('todos'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('new-todo'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$placeholder('What needs to be done?'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$value(model.todo.title),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$autofocus(true),
														_1: {
															ctor: '::',
															_0: _user$project$Main$onEnter(_user$project$Main$Add),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateField),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$section,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('main'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$ul,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('todo-list'),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$List$map,
											_user$project$Main$todoView,
											_user$project$Main$filteredTodos(model))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$footer,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('footer'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('todo-count'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$strong,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															_elm_lang$core$Basics$toString(
																_elm_lang$core$List$length(
																	A2(
																		_elm_lang$core$List$filter,
																		function (todo) {
																			return _elm_lang$core$Native_Utils.eq(todo.completed, false);
																		},
																		model.todos)))),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(' items left'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$ul,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('filters'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(_user$project$Main$filterItemView, model, _user$project$Main$All),
													_1: {
														ctor: '::',
														_0: A2(_user$project$Main$filterItemView, model, _user$project$Main$Active),
														_1: {
															ctor: '::',
															_0: A2(_user$project$Main$filterItemView, model, _user$project$Main$Completed),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('clear-completed'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Clear),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Clear completed'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _elm_lang$core$Platform_Cmd$none},
		update: _user$project$Main$update,
		view: _user$project$Main$view,
		subscriptions: _user$project$Main$subscriptions
	})();
